{"version":3,"sources":["components/AddCategoria.js","helpers/getGifs.js","components/GifGridItem.js","components/GifsGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategoria","setCategorias","useState","valueInput","setValueInput","onSubmit","event","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","categorias","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","titulo","title","images","downsized_medium","GifGridItem","className","src","alt","GifsGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAMC,iBACFJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAUP,EAAWK,QAArB,mBAAgCE,OAC9CN,EAAc,MAIlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAZ1B,SAACP,GACjBF,EAAcE,EAAMQ,OAAOF,a,+BCNtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0DAC4CC,UAC3DH,GAFe,sDAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,OAAQF,EAAIG,MACZX,IAAG,UAAEQ,EAAII,cAAN,aAAE,EAAYC,iBAAiBb,QAXvB,kBAcZM,GAdY,4CAAH,sDCEPQ,EAAc,SAAC,GAAqB,IAAnBd,EAAkB,EAAlBA,IAAKU,EAAa,EAAbA,OAC/B,OACI,sBAAKK,UAAU,2CAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCFHQ,EAAW,SAAC,GAAoB,IAAlBpB,EAAiB,EAAjBA,WACvB,ECDwB,SAACA,GACzB,MAA0Bd,mBAAS,CAAEqB,KAAM,GAAIc,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OALAC,qBAAU,WACNzB,EAAQC,GAAYyB,MAAK,SAACjB,GACtBe,EAAS,CAAEhB,KAAMC,EAAMa,SAAS,SAErC,CAACrB,IACGsB,EDNmBI,CAAa1B,GAA/BqB,EAAR,EAAQA,QAASd,EAAjB,EAAiBA,KAEjB,OACI,qCACI,oBAAIU,UAAU,uCAAd,SACKjB,IAEJqB,GACG,mBAAGJ,UAAU,oCAAb,wBAEJ,qBAAKA,UAAU,YAAf,SACKV,EAAKE,KAAI,SAACC,GACP,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEGlCgB,EAjBM,WACjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAOc,EAAP,KAAmBf,EAAnB,KAEA,OACI,qCACI,gDACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BACKe,EAAWS,KAAI,SAACf,GAAD,OACZ,cAAC,EAAD,CAAUM,WAAYN,GAAUA,Y,MCPpDkC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f38c0115.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategoria = ({ setCategorias }) => {\r\n    const [valueInput, setValueInput] = useState('');\r\n    const cambioInput = (event) => {\r\n        setValueInput(event.target.value);\r\n    };\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (valueInput.trim().length > 2) {\r\n            setCategorias((cat) => [valueInput.trim(), ...cat]);\r\n            setValueInput('');\r\n        }\r\n    };\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type='text' value={valueInput} onChange={cambioInput} />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategoria.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (categorias) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(\r\n        categorias\r\n    )}&api_key=rAvBedJqMGAR7ZKPGtmjW4oNd8xWzuD5`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            titulo: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ url, titulo }) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInUp'>\r\n            <img src={url} alt={titulo} />\r\n            <p>{titulo}</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifsGrid = ({ categorias }) => {\r\n    const { loading, data } = useFetchGifs(categorias);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=' animate__animated animate__fadeInUp'>\r\n                {categorias}\r\n            </h3>\r\n            {loading && (\r\n                <p className=' animate__animated animate__flash'>Loading...</p>\r\n            )}\r\n            <div className='card-grid'>\r\n                {data.map((img) => {\r\n                    return <GifGridItem key={img.id} {...img} />;\r\n                })}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categorias) => {\r\n    const [state, setState] = useState({ data: [], loading: true });\r\n    useEffect(() => {\r\n        getGifs(categorias).then((gifs) => {\r\n            setState({ data: gifs, loading: false });\r\n        });\r\n    }, [categorias]);\r\n    return state;\r\n};\r\n","import { useState } from 'react';\r\nimport { AddCategoria } from './components/AddCategoria';\r\nimport { GifsGrid } from './components/GifsGrid';\r\nconst GifExpertApp = () => {\r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategoria setCategorias={setCategorias} />\r\n            <hr />\r\n            <ol>\r\n                {categorias.map((cat) => (\r\n                    <GifsGrid categorias={cat} key={cat} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}